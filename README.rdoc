= Encyclopedia of Life - Vagrant Environment

=== www.eol.org

== INTRODUCTION

Welcome to the Encyclopedia of Life Vagrant project. This project contains 
the minimal stuff needed to get the Vagrant version of the code working.
The following process should introduce all of the tools you need beyond a
regular operating system to get the point where all the EOL tests are
successfully passing.  If you run into any issues please record it here:

https://github.com/EOL/eol-vagrant/issues (free account on github.com required)

At the high level this process relies on an existing Vagrant box for EOL
that has been pre-configured with all the needed tools. In essence you will
download the tools to run and create the box, and then create it.  To the best
of our knowledge this is the fastest way for a new developer to get a reasonably 
recent version of the code setup and running the tests.  This process should 
take less than half an hour from beginning to end and has been clocked at under 
5 minutes if you have VirtualBox and Vagrant already setup.

If you are interested in the gory details regarding how the Vagrant box itself
gets created, please go to:

https://github.com/EOL/eol-build-vagrant.

Note that some of the steps below require administrator access on your machine.

Also most of the real work will be run from a command line.  On Macs you can 
use the Terminal application which should be in your Applications => 
Utilities folder. On Windows machines you can use puTTY
(http://www.putty.org/).  On Linux machines it depends a bit on the 
distribution you are using, but we expect you'll know how to get to a command 
line.  Below commands are in boxes and lines that start with '#' are comments
which should *not* be typed in.  You will be switching between the local host 
command line and the Vagrant machine command line a bit.  Any section that 
needs to be on the Vagrant machine will start with:

  # Vagrant

Sections that start on the local host will start with:

  # Local Host

If you are working through this in order, it will not be necessary to exit 
and connect to vagrant each time, but there is at least one spot where that 
is necessary.  To get from the vagrant host to the local host give the command:

  exit

== LICENSE

The full code base is released under the MIT License.  Details are available 
in the "LICENSE" file at the root of the code folder.

== Using the Vagrant box for EOL

Things you need to do:

1. Install VirtualBox
2. Install Vagrant
3. Install Git
4. Git the Vagrant box for EOL Environment
5. Run 'vagrant up'
6. Tweak the new machine
7. Run the tests

==== Install VirtualBox

Go to https://www.virtualbox.org/wiki/Downloads and download the appropriate 
version of VirtualBox for your operating system. Follow the installation 
instructions, but don't worry about actually running the application.

==== Install Vagrant

Go to http://www.vagrantup.com/downloads.html and download the appropriate 
version of Vagrant. Follow the installation instructions.

==== Install Git

Get a reasonably recent version of the command line version of Git. This may 
already be installed on your machine or you may need to download and install it
from the web. We recommend creating an account at http://github.com and
and following their instructions to get Git installed.

==== Git the Vagrant box for EOL Environment

Once Git is installed we recommend creating a directory for checking out
git repositories, say ~/git, but it can go anywhere.

  # Local Host
  mkdir ~/git; cd ~/git

Now checkout this repo.  It is very small (~6K, yes K).

  git clone https://github.com/EOL/eol-vagrant.git

is the easiest approach. However, advanced git users may want to use SSH access
to GitHub as described here: help.github.com/articles/generating-ssh-keys

==== Run 'vagrant up'

  # Local Host
  cd eol-vagrant
  vagrant up

This should create a Vagrant VM on your local host.  The first you do
this it will download the Vagrant box which may take a while since it is
close to 2G.  Once the command completes you should be able to access the
box with:

  # Local Host
  vagrant ssh

This should respond with something like:

  Welcome to Ubuntu 12.04.3 LTS (GNU/Linux 3.8.0-29-generic x86_64)
  vagrant@vagrant:~$ 

==== Make Sure You Have the Latest Code

  # Vagrant
  cd ~/git/eol; git pull; bundle install; rake db:migrate
  cd ~/git/eol_php_code; git pull; bundle install

These may give a fair amount of output or simply respond with
'Already up-to-date.' depending on how much work has been done on the
EOL tools since the Vagrant box was last updated.

==== Start Solr

  cd ~/git/eol; rake solr:start

This should respond with something:

  ++ No config for environment_eol_org found, skipping.
  ** LOADED: environments/local **
  ++ No config for environments/development_eol_org found, skipping.
  Connecting to database specified by database.yml
  fix_rack_110_quote_parsing.rb not loaded
  ** Starting Background Solr instance for EOL...
  pid-file for killed process 2700 found (/home/vagrant/git/eol/solr/solr/eol-solr.pid), deleting.

==== Run the tests

To run the Ruby on Rails tests:

  # Vagrant
  cd ~/git/eol
  rake

This should generate a fair amount of output, but spend most of it's time at a
line that looks something like:

  1070/2141 |============================= 50 ============================>| Time: 00:12:44 

Near the end there should be lines something like:

  Finished in 25 minutes 45 seconds
  2141 examples, 0 failures, 143 pending

The key part of this are the '0 failures' and no errors should be reported.
If this does not happen, first try running the tests again since we have seen
cases of subtle order dependencies that we have not fully worked out and can
cause failures. However, if the problems persist, please let us know through 
the Github project.

To run the PHP tests:

  cd ~/git/eol_php_code
  php tests/run_tests.php

Again this should generate a fair amount of output, but the final lines should
look something like:

  Test cases run: 35/35, Passes: 974, Failures: 0, Exceptions: 0
  Tests ran in 241.975136 seconds

Again, if failures or exceptions are reported, please let us know through the
Github project.
